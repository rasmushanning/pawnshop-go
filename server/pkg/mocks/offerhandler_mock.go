// Code generated by MockGen. DO NOT EDIT.
// Source: pawnshop.go
//
// Generated by this command:
//
//	mockgen -source pawnshop.go -destination ../mocks/offerhandler_mock.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	messages "pawnshop/server/pkg/messages"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOfferHandler is a mock of OfferHandler interface.
type MockOfferHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOfferHandlerMockRecorder
}

// MockOfferHandlerMockRecorder is the mock recorder for MockOfferHandler.
type MockOfferHandlerMockRecorder struct {
	mock *MockOfferHandler
}

// NewMockOfferHandler creates a new mock instance.
func NewMockOfferHandler(ctrl *gomock.Controller) *MockOfferHandler {
	mock := &MockOfferHandler{ctrl: ctrl}
	mock.recorder = &MockOfferHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferHandler) EXPECT() *MockOfferHandlerMockRecorder {
	return m.recorder
}

// HandleOffer mocks base method.
func (m *MockOfferHandler) HandleOffer(o messages.Offer) messages.Answer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOffer", o)
	ret0, _ := ret[0].(messages.Answer)
	return ret0
}

// HandleOffer indicates an expected call of HandleOffer.
func (mr *MockOfferHandlerMockRecorder) HandleOffer(o any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOffer", reflect.TypeOf((*MockOfferHandler)(nil).HandleOffer), o)
}

// String mocks base method.
func (m *MockOfferHandler) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockOfferHandlerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockOfferHandler)(nil).String))
}
